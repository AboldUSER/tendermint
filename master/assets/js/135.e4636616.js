(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{679:function(I,y,l){"use strict";l.r(y);var b=l(1),d=Object(b.a)({},(function(){var I=this,y=I.$createElement,l=I._self._c||y;return l("ContentSlotsDistributor",{attrs:{"slot-key":I.$parent.slotKey}},[l("h1",{attrs:{id:"configuration"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[I._v("#")]),I._v(" Configuration")]),I._v(" "),l("p",[I._v("Tendermint Core can be configured via a TOML file in\n"),l("code",[I._v("$TMHOME/config/config.toml")]),I._v(". Some of these parameters can be overridden by\ncommand-line flags. For most users, the options in the "),l("code",[I._v("##### main base configuration options #####")]),I._v(" are intended to be modified while config options\nfurther below are intended for advance power users.")]),I._v(" "),l("h2",{attrs:{id:"options"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[I._v("#")]),I._v(" Options")]),I._v(" "),l("p",[I._v("The default configuration file create by "),l("code",[I._v("tendermint init")]),I._v(" has all\nthe parameters set with their default values. It will look something\nlike the file below, however, double check by inspecting the\n"),l("code",[I._v("config.toml")]),I._v(" created with your version of "),l("code",[I._v("tendermint")]),I._v(" installed:")]),I._v(" "),l("tm-code-block",{staticClass:"codeblock",attrs:{language:"toml",base64:""}}),I._v(" "),l("h2",{attrs:{id:"empty-blocks-vs-no-empty-blocks"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#empty-blocks-vs-no-empty-blocks"}},[I._v("#")]),I._v(" Empty blocks VS no empty blocks")]),I._v(" "),l("h3",{attrs:{id:"create-empty-blocks-true"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#create-empty-blocks-true"}},[I._v("#")]),I._v(" create-empty-blocks = true")]),I._v(" "),l("p",[I._v("If "),l("code",[I._v("create-empty-blocks")]),I._v(" is set to "),l("code",[I._v("true")]),I._v(" in your config, blocks will be\ncreated ~ every second (with default consensus parameters). You can regulate\nthe delay between blocks by changing the "),l("code",[I._v("timeout-commit")]),I._v(". E.g. "),l("code",[I._v('timeout-commit = "10s"')]),I._v(" should result in ~ 10 second blocks.")]),I._v(" "),l("h3",{attrs:{id:"create-empty-blocks-false"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#create-empty-blocks-false"}},[I._v("#")]),I._v(" create-empty-blocks = false")]),I._v(" "),l("p",[I._v("In this setting, blocks are created when transactions received.")]),I._v(" "),l("p",[I._v("Note after the block H, Tendermint creates something we call a \"proof block\"\n(only if the application hash changed) H+1. The reason for this is to support\nproofs. If you have a transaction in block H that changes the state to X, the\nnew application hash will only be included in block H+1. If after your\ntransaction is committed, you want to get a light-client proof for the new state\n(X), you need the new block to be committed in order to do that because the new\nblock has the new application hash for the state X. That's why we make a new\n(empty) block if the application hash changes. Otherwise, you won't be able to\nmake a proof for the new state.")]),I._v(" "),l("p",[I._v("Plus, if you set "),l("code",[I._v("create-empty-blocks-interval")]),I._v(" to something other than the\ndefault ("),l("code",[I._v("0")]),I._v("), Tendermint will be creating empty blocks even in the absence of\ntransactions every "),l("code",[I._v("create-empty-blocks-interval")]),I._v(". For instance, with\n"),l("code",[I._v("create-empty-blocks = false")]),I._v(" and "),l("code",[I._v('create-empty-blocks-interval = "30s"')]),I._v(",\nTendermint will only create blocks if there are transactions, or after waiting\n30 seconds without receiving any transactions.")]),I._v(" "),l("h2",{attrs:{id:"consensus-timeouts-explained"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#consensus-timeouts-explained"}},[I._v("#")]),I._v(" Consensus timeouts explained")]),I._v(" "),l("p",[I._v("There's a variety of information about timeouts in "),l("RouterLink",{attrs:{to:"/tendermint-core/running-in-production.html"}},[I._v("Running in\nproduction")])],1),I._v(" "),l("p",[I._v("You can also find more detailed technical explanation in the spec: "),l("a",{attrs:{href:"https://arxiv.org/abs/1807.04938",target:"_blank",rel:"noopener noreferrer"}},[I._v("The latest\ngossip on BFT consensus"),l("OutboundLink")],1),I._v(".")]),I._v(" "),l("tm-code-block",{staticClass:"codeblock",attrs:{language:"toml",base64:"W2NvbnNlbnN1c10KLi4uCgp0aW1lb3V0LXByb3Bvc2UgPSAmcXVvdDszcyZxdW90Owp0aW1lb3V0LXByb3Bvc2UtZGVsdGEgPSAmcXVvdDs1MDBtcyZxdW90Owp0aW1lb3V0LXByZXZvdGUgPSAmcXVvdDsxcyZxdW90Owp0aW1lb3V0LXByZXZvdGUtZGVsdGEgPSAmcXVvdDs1MDBtcyZxdW90Owp0aW1lb3V0LXByZWNvbW1pdCA9ICZxdW90OzFzJnF1b3Q7CnRpbWVvdXQtcHJlY29tbWl0LWRlbHRhID0gJnF1b3Q7NTAwbXMmcXVvdDsKdGltZW91dC1jb21taXQgPSAmcXVvdDsxcyZxdW90Owo="}}),I._v(" "),l("p",[I._v("Note that in a successful round, the only timeout that we absolutely wait no\nmatter what is "),l("code",[I._v("timeout-commit")]),I._v(".")]),I._v(" "),l("p",[I._v("Here's a brief summary of the timeouts:")]),I._v(" "),l("ul",[l("li",[l("code",[I._v("timeout-propose")]),I._v(" = how long we wait for a proposal block before prevoting\nnil")]),I._v(" "),l("li",[l("code",[I._v("timeout-propose-delta")]),I._v(" = how much timeout-propose increases with each round")]),I._v(" "),l("li",[l("code",[I._v("timeout-prevote")]),I._v(" = how long we wait after receiving +2/3 prevotes for\nanything (ie. not a single block or nil)")]),I._v(" "),l("li",[l("code",[I._v("timeout-prevote-delta")]),I._v(" = how much the timeout-prevote increases with each\nround")]),I._v(" "),l("li",[l("code",[I._v("timeout-precommit")]),I._v(" = how long we wait after receiving +2/3 precommits for\nanything (ie. not a single block or nil)")]),I._v(" "),l("li",[l("code",[I._v("timeout-precommit-delta")]),I._v(" = how much the timeout-precommit increases with\neach round")]),I._v(" "),l("li",[l("code",[I._v("timeout-commit")]),I._v(" = how long we wait after committing a block, before starting\non the new height (this gives us a chance to receive some more precommits,\neven though we already have +2/3)")])]),I._v(" "),l("h2",{attrs:{id:"p2p-settings"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#p2p-settings"}},[I._v("#")]),I._v(" P2P settings")]),I._v(" "),l("p",[I._v("This section will cover settings within the p2p section of the "),l("code",[I._v("config.toml")]),I._v(".")]),I._v(" "),l("ul",[l("li",[l("code",[I._v("external-address")]),I._v(" = is the address that will be advertised for other nodes to use. We recommend setting this field with your public IP and p2p port.")]),I._v(" "),l("li",[l("code",[I._v("seeds")]),I._v(" = is a list of comma separated seed nodes that you will connect upon a start and ask for peers. A seed node is a node that does not participate in consensus but only helps propagate peers to nodes in the networks")]),I._v(" "),l("li",[l("code",[I._v("persistent-peers")]),I._v(" = is a list of comma separated peers that you will always want to be connected to. If you're already connected to the maximum number of peers, persistent peers will not be added.")]),I._v(" "),l("li",[l("code",[I._v("max-num-inbound-peers")]),I._v(" = is the maximum number of peers you will accept inbound connections from at one time (where they dial your address and initiate the connection).")]),I._v(" "),l("li",[l("code",[I._v("max-num-outbound-peers")]),I._v(" = is the maximum number of peers you will initiate outbound connects to at one time (where you dial their address and initiate the connection).")]),I._v(" "),l("li",[l("code",[I._v("unconditional-peer-ids")]),I._v(" = is similar to "),l("code",[I._v("persistent-peers")]),I._v(" except that these peers will be connected to even if you are already connected to the maximum number of peers. This can be a validator node ID on your sentry node.")]),I._v(" "),l("li",[l("code",[I._v("pex")]),I._v(" = turns the peer exchange reactor on or off. Validator node will want the "),l("code",[I._v("pex")]),I._v(" turned off so it would not begin gossiping to unknown peers on the network. PeX can also be turned off for statically configured networks with fixed network connectivity. For full nodes on open, dynamic networks, it should be turned on.")]),I._v(" "),l("li",[l("code",[I._v("seed-mode")]),I._v(" = is used for when node operators want to run their node as a seed node. Seed node's run a variation of the PeX protocol that disconnects from peers after sending them a list of peers to connect to. To minimize the servers usage, it is recommended to set the mempool's size to 0.")]),I._v(" "),l("li",[l("code",[I._v("private-peer-ids")]),I._v(" = is a comma separated list of node ids that you would not like exposed to other peers (ie. you will not tell other peers about the private-peer-ids). This can be filled with a validators node id.")])])],1)}),[],!1,null,null,null);y.default=d.exports}}]);