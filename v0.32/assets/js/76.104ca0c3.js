(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{357:function(e,t,a){"use strict";a.r(t);var r=a(1),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"adr-026-general-merkle-proof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adr-026-general-merkle-proof"}}),e._v(" ADR 026: General Merkle Proof")]),e._v(" "),a("h2",{attrs:{id:"context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context"}}),e._v(" Context")]),e._v(" "),a("p",[e._v("We are using raw "),a("code",[e._v("[]byte")]),e._v(" for merkle proofs in "),a("code",[e._v("abci.ResponseQuery")]),e._v(". It makes hard to handle multilayer merkle proofs and general cases. Here, new interface "),a("code",[e._v("ProofOperator")]),e._v(" is defined. The users can defines their own Merkle proof format and layer them easily.")]),e._v(" "),a("p",[e._v("Goals:")]),e._v(" "),a("ul",[a("li",[e._v("Layer Merkle proofs without decoding/reencoding")]),e._v(" "),a("li",[e._v("Provide general way to chain proofs")]),e._v(" "),a("li",[e._v("Make the proof format extensible, allowing thirdparty proof types")])]),e._v(" "),a("h2",{attrs:{id:"decision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decision"}}),e._v(" Decision")]),e._v(" "),a("h3",{attrs:{id:"proofoperator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proofoperator"}}),e._v(" ProofOperator")]),e._v(" "),a("p",[a("code",[e._v("type ProofOperator")]),e._v(" is an interface for Merkle proofs. The definition is:")]),e._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("type")]),e._v(" ProofOperator "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("byte")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("byte")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ProofOp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" ProofOp\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Since a proof can treat various data type, "),a("code",[e._v("Run()")]),e._v(" takes "),a("code",[e._v("[][]byte")]),e._v(" as the argument, not "),a("code",[e._v("[]byte")]),e._v(". For example, a range proof's "),a("code",[e._v("Run()")]),e._v(" can take multiple key-values as its argument. It will then return the root of the tree for the further process, calculated with the input value.")]),e._v(" "),a("p",[a("code",[e._v("ProofOperator")]),e._v(" does not have to be a Merkle proof - it can be a function that transforms the argument for intermediate process e.g. prepending the length to the "),a("code",[e._v("[]byte")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"proofop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proofop"}}),e._v(" ProofOp")]),e._v(" "),a("p",[a("code",[e._v("type ProofOp")]),e._v(" is a protobuf message which is a triple of "),a("code",[e._v("Type string")]),e._v(", "),a("code",[e._v("Key []byte")]),e._v(", and "),a("code",[e._v("Data []byte")]),e._v(". "),a("code",[e._v("ProofOperator")]),e._v(" and "),a("code",[e._v("ProofOp")]),e._v("are interconvertible, using "),a("code",[e._v("ProofOperator.ProofOp()")]),e._v(" and "),a("code",[e._v("OpDecoder()")]),e._v(", where "),a("code",[e._v("OpDecoder")]),e._v(" is a function that each proof type can register for their own encoding scheme. For example, we can add an byte for encoding scheme before the serialized proof, supporting JSON decoding.")]),e._v(" "),a("h2",{attrs:{id:"status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#status"}}),e._v(" Status")]),e._v(" "),a("h2",{attrs:{id:"consequences"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}}),e._v(" Consequences")]),e._v(" "),a("h3",{attrs:{id:"positive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#positive"}}),e._v(" Positive")]),e._v(" "),a("ul",[a("li",[e._v("Layering becomes easier (no encoding/decoding at each step)")]),e._v(" "),a("li",[e._v("Thirdparty proof format is available")])]),e._v(" "),a("h3",{attrs:{id:"negative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#negative"}}),e._v(" Negative")]),e._v(" "),a("ul",[a("li",[e._v("Larger size for abci.ResponseQuery")]),e._v(" "),a("li",[e._v("Unintuitive proof chaining(it is not clear what "),a("code",[e._v("Run()")]),e._v(" is doing)")]),e._v(" "),a("li",[e._v("Additional codes for registering "),a("code",[e._v("OpDecoder")]),e._v("s")])])])}),[],!1,null,null,null);t.default=s.exports}}]);